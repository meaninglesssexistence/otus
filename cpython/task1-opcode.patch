commit aaca711458dce725f001b743056c59572a072cd1
Author: George Atanasyan <gosha@atanasyan.com>
Date:   Sat Mar 13 10:51:24 2021 +0300

    [task1] Implement `LOAD_OTUS` opcode
    
    `LOAD_OTUS` opcode replaces `LOAD_FAST 0` opcode followed by the
    `LOAD_CONST` opcode to reduce byte-code size.

diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed548729e..8ff04d08e1 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -159,6 +159,9 @@ extern "C" {
 #define SET_ADD         146
 #define MAP_ADD         147
 
+/* Combine LOAD_FAST and LOAD_CONST opcodes */
+#define LOAD_OTUS       148
+
 
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
 	     PyCmp_IN, PyCmp_NOT_IN, PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365b6a..9158ca64f9 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -189,4 +189,7 @@ EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
 
+def_op('LOAD_OTUS', 148)        # Index in const list
+hasconst.append(100)
+
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Lib/test/test_dis.py b/Lib/test/test_dis.py
index 1fcbd41ef1..b48339a4fc 100644
--- a/Lib/test/test_dis.py
+++ b/Lib/test/test_dis.py
@@ -83,6 +83,42 @@ _BIG_LINENO_FORMAT = """\
               7 RETURN_VALUE
 """
 
+
+def _load_otus1(n):
+    return fib(n - 1) + fib(n - 2) if n > 1 else n
+
+dis_load_otus1 = """\
+%3d           0 LOAD_OTUS                1
+              3 COMPARE_OP               4 (>)
+              6 POP_JUMP_IF_FALSE       31
+              9 LOAD_GLOBAL              0 (fib)
+             12 LOAD_OTUS                1
+             15 BINARY_SUBTRACT
+             16 CALL_FUNCTION            1
+             19 LOAD_GLOBAL              0 (fib)
+             22 LOAD_OTUS                2
+             25 BINARY_SUBTRACT
+             26 CALL_FUNCTION            1
+             29 BINARY_ADD
+             30 RETURN_VALUE
+        >>   31 LOAD_FAST                0 (n)
+             34 RETURN_VALUE
+"""%(_load_otus1.func_code.co_firstlineno + 1)
+
+def _load_otus2(a, b):
+    return 0 if b > 0 else 1
+
+dis_load_otus2 = """\
+%3d           0 LOAD_FAST                1 (b)
+              3 LOAD_CONST               1 (0)
+              6 COMPARE_OP               4 (>)
+              9 POP_JUMP_IF_FALSE       16
+             12 LOAD_CONST               1 (0)
+             15 RETURN_VALUE
+        >>   16 LOAD_CONST               2 (1)
+             19 RETURN_VALUE
+"""%(_load_otus2.func_code.co_firstlineno + 1)
+
 class DisTests(unittest.TestCase):
     def do_disassembly_test(self, func, expected):
         s = StringIO.StringIO()
@@ -145,6 +181,11 @@ class DisTests(unittest.TestCase):
             expected = _BIG_LINENO_FORMAT % (i + 2)
             self.do_disassembly_test(func(i), expected)
 
+    def test_load_otus(self):
+        self.assertEqual(dis.opname[dis.opmap["LOAD_OTUS"]], "LOAD_OTUS")
+        self.do_disassembly_test(_load_otus1, dis_load_otus1)
+        self.do_disassembly_test(_load_otus2, dis_load_otus2)
+
 def test_main():
     run_unittest(DisTests)
 
diff --git a/Python/ceval.c b/Python/ceval.c
index e1140a8e40..7a63b0f373 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1244,6 +1244,24 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             FAST_DISPATCH();
         }
 
+        TARGET(LOAD_OTUS)
+        {
+            x = GETLOCAL(0);
+            if (x == NULL) {
+                format_exc_check_arg(PyExc_UnboundLocalError,
+                    UNBOUNDLOCAL_ERROR_MSG,
+                    PyTuple_GetItem(co->co_varnames, 0));
+                break;
+            }
+
+            Py_INCREF(x);
+            PUSH(x);
+            x = GETITEM(consts, oparg);
+            Py_INCREF(x);
+            PUSH(x);
+            FAST_DISPATCH();
+        }
+
         PREDICTED_WITH_ARG(STORE_FAST);
         TARGET(STORE_FAST)
         {
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127a15..8c29b98960 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -147,7 +147,7 @@ static void *opcode_targets[256] = {
     &&TARGET_EXTENDED_ARG,
     &&TARGET_SET_ADD,
     &&TARGET_MAP_ADD,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f8861c..c83a154836 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -425,6 +425,15 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 cumlc = 0;
                 break;
 
+                /* Replace LOAD_FAST 0 followed by LOAD_CONST
+                   by the single LOAD_OTUS opcode. */
+            case LOAD_FAST:
+                if (codestr[i+3] != LOAD_CONST || GETARG(codestr, i) != 0)
+                    continue;
+                memset(codestr+i, NOP, 3);
+                codestr[i+3] = LOAD_OTUS;
+                break;
+
                 /* Try to fold tuples of constants (includes a case for lists
                    which are only used for "in" and "not in" tests).
                    Skip over BUILD_SEQN 1 UNPACK_SEQN 1.
